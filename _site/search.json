[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto_p",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "barplots.html",
    "href": "barplots.html",
    "title": "quarto_p",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\n\n\n\n\nCode\nteams = pd.read_excel(\"Data23-24/teams_season_compare.xlsx\")\nwiz = pd.read_excel(\"Data23-24/wiz.xlsx\")\n\n\n\n\nCode\n!pip install ipywidgets\nimport ipywidgets as widgets\nfrom IPython.display import display\nteams = teams[teams['Team']!= 'Washington Wizards']\nteams_mean = teams.mean(numeric_only=True)\nteams_mean = pd.DataFrame(teams_mean).T\nteams_mean=teams_mean.drop(columns='Rk')\ndef display_dataframe(rows):\n    display(teams.head(rows))\nrows_slider = widgets.IntSlider(min=1, max=len(teams), value=5, description='Rows:')\ndef update_display(event):\n    display_dataframe(rows=event['new'])\n\nrows_slider.observe(update_display, 'value')\n\n# Display the initial DataFrame\ndisplay_dataframe(rows_slider.value)\n\n# Display the slider widget\ndisplay(rows_slider)\n\n\nRequirement already satisfied: ipywidgets in c:\\users\\daniel chu\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (8.1.2)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipywidgets) (0.1.4)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipywidgets) (8.15.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipywidgets) (5.10.1)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in c:\\users\\daniel chu\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from ipywidgets) (4.0.10)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in c:\\users\\daniel chu\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from ipywidgets) (3.0.10)\nRequirement already satisfied: backcall in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (0.2.0)\nRequirement already satisfied: decorator in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (0.19.0)\nRequirement already satisfied: matplotlib-inline in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (0.1.6)\nRequirement already satisfied: pickleshare in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (0.7.5)\nRequirement already satisfied: prompt-toolkit!=3.0.37,&lt;3.1.0,&gt;=3.0.30 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (3.0.39)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (2.16.1)\nRequirement already satisfied: stack-data in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (0.6.2)\nRequirement already satisfied: colorama in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets) (0.4.6)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets) (0.8.3)\nRequirement already satisfied: wcwidth in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from prompt-toolkit!=3.0.37,&lt;3.1.0,&gt;=3.0.30-&gt;ipython&gt;=6.1.0-&gt;ipywidgets) (0.2.6)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets) (1.2.0)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets) (2.4.0)\nRequirement already satisfied: pure-eval in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets) (0.2.2)\nRequirement already satisfied: six&gt;=1.12.0 in c:\\users\\daniel chu\\appdata\\roaming\\python\\python311\\site-packages (from asttokens&gt;=2.1.0-&gt;stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets) (1.16.0)\n\n\n\n\n\n\n\n\n\nRk\nTeam\nG\nMP\nFG\nFGA\nFG%\n3P\n3PA\n3P%\n...\nFT%\nORB\nDRB\nTRB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\n\n\n\n\n0\n1.0\nIndiana Pacers*\n82\n240.3\n47.0\n92.7\n0.507\n13.2\n35.3\n0.374\n...\n0.782\n10.1\n31.4\n41.5\n30.8\n7.7\n5.9\n12.9\n21.4\n123.3\n\n\n1\n2.0\nBoston Celtics*\n82\n241.8\n43.9\n90.2\n0.487\n16.5\n42.5\n0.388\n...\n0.807\n10.7\n35.6\n46.3\n26.9\n6.8\n6.6\n11.9\n16.2\n120.6\n\n\n2\n3.0\nOklahoma City Thunder*\n82\n241.5\n44.5\n89.3\n0.499\n13.3\n34.2\n0.389\n...\n0.825\n8.8\n33.2\n42.0\n27.1\n8.5\n6.6\n12.7\n18.8\n120.1\n\n\n3\n4.0\nMilwaukee Bucks*\n82\n241.5\n43.1\n88.5\n0.487\n14.2\n38.1\n0.373\n...\n0.774\n9.4\n34.8\n44.2\n26.5\n6.8\n5.0\n12.9\n19.2\n119.0\n\n\n4\n5.0\nAtlanta Hawks*\n82\n242.1\n43.0\n92.5\n0.465\n13.7\n37.7\n0.364\n...\n0.797\n12.5\n32.2\n44.7\n26.6\n7.5\n4.5\n13.5\n18.6\n118.3\n\n\n\n\n5 rows × 25 columns\n\n\n\n\n\n\n\nwiz = wiz.iloc[[1]]\nwiz = wiz.drop(columns='Unnamed: 0')\ndf = pd.concat([wiz,teams_mean])\ndf = df.drop(columns='G')\nper = ['FG%','3P%','2P%','FT%']\ndf[per]=df[per].multiply(100)\n\n\nimport plotly.graph_objs as go\nrow1 = df.iloc[0]  \nrow2 = df.iloc[1]\nlabels = df.columns\n\n# Create trace for row1\ntrace1 = go.Bar(\n    x=labels,\n    y=row1,\n    name='Washington Wizard'\n)\n\n# Create trace for row2\ntrace2 = go.Bar(\n    x=labels,\n    y=row2,\n    name='Mean of the Rest'\n)\n\n# Create layout\nlayout = go.Layout(\n    title='Comparison of Washington Wizard and the Mean of rest of the teams',\n    barmode='group'  # This stacks the bars on top of each other\n)\n\n# Combine traces and layout\nfig = go.Figure(data=[trace1, trace2], layout=layout)\n\n# Plot the figure\nfig.show()"
  },
  {
    "objectID": "player_performance.html",
    "href": "player_performance.html",
    "title": "Washington Wizard Star player performance",
    "section": "",
    "text": "To further evaluate and improve the performance of the whole team, we need to examine how the star players perform. The star players of the Washington Wizards are Jordan Poole and Kyle Kuzma, and we will take a look at their performance throughout their career.\n\n\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport plotly as ply\n\n\n\n\nCode\nJP = pd.read_excel('Data23-24\\JP_career.xlsx')\nKK = pd.read_excel('Data23-24\\KK_career.xlsx')\ncol_d = ['Age','Lg','Pos', 'Awards','Tm']\nJP = JP.drop(columns=col_d)\nJP = JP.drop(JP.tail(4).index)\nJP\n\n\n\n\n\n\n\n\n\nSeason\nG\nGS\nMP\nFG\nFGA\nFG%\n3P\n3PA\n3P%\n...\nFT%\nORB\nDRB\nTRB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\n\n\n\n\n0\n2019-20\n57.0\n14.0\n22.4\n2.9\n8.8\n0.333\n1.3\n4.6\n0.279\n...\n0.798\n0.2\n1.9\n2.1\n2.4\n0.6\n0.2\n1.3\n1.6\n8.8\n\n\n1\n2020-21\n51.0\n7.0\n19.4\n4.0\n9.3\n0.432\n1.9\n5.4\n0.351\n...\n0.882\n0.3\n1.5\n1.8\n1.9\n0.5\n0.2\n1.0\n1.7\n12.0\n\n\n2\n2021-22\n76.0\n51.0\n30.0\n6.2\n13.9\n0.448\n2.8\n7.6\n0.364\n...\n0.925\n0.4\n3.0\n3.4\n4.0\n0.8\n0.3\n2.5\n2.7\n18.5\n\n\n3\n2022-23\n82.0\n43.0\n30.0\n6.7\n15.6\n0.430\n2.6\n7.8\n0.336\n...\n0.870\n0.4\n2.4\n2.7\n4.5\n0.8\n0.3\n3.1\n2.6\n20.4\n\n\n4\n2023-24\n78.0\n66.0\n30.1\n6.3\n15.2\n0.413\n2.4\n7.2\n0.326\n...\n0.877\n0.4\n2.3\n2.7\n4.4\n1.1\n0.3\n2.4\n3.1\n17.4\n\n\n\n\n5 rows × 26 columns\n\n\n\n\n\nCode\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n# Define available stats for dropdown\nimport plotly.express as px\nnumerical_columns = JP.select_dtypes(include=['float64', 'int64']).columns\navailable_stats = numerical_columns.tolist()  # Assuming numerical_columns is a pandas Index or Series\n\n# Create dropdown menu\ndropdown = go.layout.Updatemenu(\n    buttons=list([\n        dict(label=stat, method='update', args=[{'visible': [stat == col for col in numerical_columns]}])\n        for stat in available_stats\n    ]),\n    direction='down', showactive=True\n)\n\n# Create traces for each stat\ntraces = [\n    go.Scatter(x=JP.index, y=JP[stat], mode='lines', name=stat) for stat in available_stats\n]\n\n# Create layout with dropdown menu and initial trace visibility\nlayout = go.Layout(\n    title='Jordan Poole Stats Over Seasons',\n    xaxis=dict(title='Season'),\n    yaxis=dict(title='Stats Value'),\n    updatemenus=[dropdown],  # Wrap the dropdown in a list\n)\n\n# Create figure\nfig = go.Figure(data=traces, layout=layout)\n\n# Show the figure\nfig.show()\n\n\n                                                \n\n\n\n\nCode\nKK = KK.drop(columns=col_d)\nKK = KK.drop(KK.tail(4).index)\nKK\n\n\n\n\n\n\n\n\n\nSeason\nG\nGS\nMP\nFG\nFGA\nFG%\n3P\n3PA\n3P%\n...\nFT%\nORB\nDRB\nTRB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\n\n\n\n\n0\n2017-18\n77.0\n37.0\n31.2\n6.1\n13.5\n0.450\n2.1\n5.6\n0.366\n...\n0.707\n1.1\n5.1\n6.3\n1.8\n0.6\n0.4\n1.8\n2.1\n16.1\n\n\n1\n2018-19\n70.0\n68.0\n33.1\n7.1\n15.5\n0.456\n1.8\n6.0\n0.303\n...\n0.752\n0.9\n4.6\n5.5\n2.5\n0.6\n0.4\n1.9\n2.4\n18.7\n\n\n2\n2019-20\n61.0\n9.0\n25.0\n4.8\n11.0\n0.436\n1.4\n4.5\n0.316\n...\n0.735\n0.9\n3.6\n4.5\n1.3\n0.5\n0.4\n1.5\n2.1\n12.8\n\n\n3\n2020-21\n68.0\n32.0\n28.7\n4.9\n11.1\n0.443\n2.0\n5.6\n0.361\n...\n0.691\n1.6\n4.5\n6.1\n1.9\n0.5\n0.6\n1.7\n1.8\n12.9\n\n\n4\n2021-22\n66.0\n66.0\n33.4\n6.4\n14.2\n0.452\n1.9\n5.7\n0.341\n...\n0.712\n1.1\n7.4\n8.5\n3.5\n0.6\n0.9\n2.6\n1.9\n17.1\n\n\n5\n2022-23\n64.0\n64.0\n35.0\n8.0\n17.8\n0.448\n2.5\n7.5\n0.333\n...\n0.730\n0.9\n6.4\n7.2\n3.7\n0.6\n0.5\n3.0\n2.3\n21.2\n\n\n6\n2023-24\n70.0\n70.0\n32.6\n8.7\n18.8\n0.463\n2.2\n6.4\n0.336\n...\n0.775\n0.9\n5.7\n6.6\n4.2\n0.5\n0.7\n2.7\n2.2\n22.2\n\n\n\n\n7 rows × 26 columns\n\n\n\n\n\nCode\nnumerical_columnsk = KK.select_dtypes(include=['float64', 'int64']).columns\navailable_stats = numerical_columnsk.tolist()  # Assuming numerical_columns is a pandas Index or Series\n\n# Create dropdown menu\ndropdown = go.layout.Updatemenu(\n    buttons=list([\n        dict(label=stat, method='update', args=[{'visible': [stat == col for col in numerical_columnsk]}])\n        for stat in available_stats\n    ]),\n    direction='down', showactive=True\n)\n\n# Create traces for each stat\ntraces = [\n    go.Scatter(x=KK.index, y=KK[stat], mode='lines', name=stat) for stat in available_stats\n]\n\n# Create layout with dropdown menu and initial trace visibility\nlayout = go.Layout(\n    title='Kyle Kuzma Stats Over Seasons',\n    xaxis=dict(title='Season'),\n    yaxis=dict(title='Stats Value'),\n    updatemenus=[dropdown],  # Wrap the dropdown in a list\n)\n\n# Create figure\nfig = go.Figure(data=traces, layout=layout)\n\n# Show the figure\nfig.show()"
  },
  {
    "objectID": "player_performance.html#jordan-poole",
    "href": "player_performance.html#jordan-poole",
    "title": "Washington Wizard Star player performance",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport plotly as ply\n\n\n\n\nCode\nJP = pd.read_excel('Data23-24\\JP_career.xlsx')\nKK = pd.read_excel('Data23-24\\KK_career.xlsx')\ncol_d = ['Age','Lg','Pos', 'Awards','Tm']\nJP = JP.drop(columns=col_d)\nJP = JP.drop(JP.tail(4).index)\nJP\n\n\n\n\n\n\n\n\n\nSeason\nG\nGS\nMP\nFG\nFGA\nFG%\n3P\n3PA\n3P%\n...\nFT%\nORB\nDRB\nTRB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\n\n\n\n\n0\n2019-20\n57.0\n14.0\n22.4\n2.9\n8.8\n0.333\n1.3\n4.6\n0.279\n...\n0.798\n0.2\n1.9\n2.1\n2.4\n0.6\n0.2\n1.3\n1.6\n8.8\n\n\n1\n2020-21\n51.0\n7.0\n19.4\n4.0\n9.3\n0.432\n1.9\n5.4\n0.351\n...\n0.882\n0.3\n1.5\n1.8\n1.9\n0.5\n0.2\n1.0\n1.7\n12.0\n\n\n2\n2021-22\n76.0\n51.0\n30.0\n6.2\n13.9\n0.448\n2.8\n7.6\n0.364\n...\n0.925\n0.4\n3.0\n3.4\n4.0\n0.8\n0.3\n2.5\n2.7\n18.5\n\n\n3\n2022-23\n82.0\n43.0\n30.0\n6.7\n15.6\n0.430\n2.6\n7.8\n0.336\n...\n0.870\n0.4\n2.4\n2.7\n4.5\n0.8\n0.3\n3.1\n2.6\n20.4\n\n\n4\n2023-24\n78.0\n66.0\n30.1\n6.3\n15.2\n0.413\n2.4\n7.2\n0.326\n...\n0.877\n0.4\n2.3\n2.7\n4.4\n1.1\n0.3\n2.4\n3.1\n17.4\n\n\n\n\n5 rows × 26 columns\n\n\n\n\n\nCode\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n# Define available stats for dropdown\nimport plotly.express as px\nnumerical_columns = JP.select_dtypes(include=['float64', 'int64']).columns\navailable_stats = numerical_columns.tolist()  # Assuming numerical_columns is a pandas Index or Series\n\n# Create dropdown menu\ndropdown = go.layout.Updatemenu(\n    buttons=list([\n        dict(label=stat, method='update', args=[{'visible': [stat == col for col in numerical_columns]}])\n        for stat in available_stats\n    ]),\n    direction='down', showactive=True\n)\n\n# Create traces for each stat\ntraces = [\n    go.Scatter(x=JP.index, y=JP[stat], mode='lines', name=stat) for stat in available_stats\n]\n\n# Create layout with dropdown menu and initial trace visibility\nlayout = go.Layout(\n    title='Jordan Poole Stats Over Seasons',\n    xaxis=dict(title='Season'),\n    yaxis=dict(title='Stats Value'),\n    updatemenus=[dropdown],  # Wrap the dropdown in a list\n)\n\n# Create figure\nfig = go.Figure(data=traces, layout=layout)\n\n# Show the figure\nfig.show()\n\n\n                                                \n\n\n\n\nCode\nKK = KK.drop(columns=col_d)\nKK = KK.drop(KK.tail(4).index)\nKK\n\n\n\n\n\n\n\n\n\nSeason\nG\nGS\nMP\nFG\nFGA\nFG%\n3P\n3PA\n3P%\n...\nFT%\nORB\nDRB\nTRB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\n\n\n\n\n0\n2017-18\n77.0\n37.0\n31.2\n6.1\n13.5\n0.450\n2.1\n5.6\n0.366\n...\n0.707\n1.1\n5.1\n6.3\n1.8\n0.6\n0.4\n1.8\n2.1\n16.1\n\n\n1\n2018-19\n70.0\n68.0\n33.1\n7.1\n15.5\n0.456\n1.8\n6.0\n0.303\n...\n0.752\n0.9\n4.6\n5.5\n2.5\n0.6\n0.4\n1.9\n2.4\n18.7\n\n\n2\n2019-20\n61.0\n9.0\n25.0\n4.8\n11.0\n0.436\n1.4\n4.5\n0.316\n...\n0.735\n0.9\n3.6\n4.5\n1.3\n0.5\n0.4\n1.5\n2.1\n12.8\n\n\n3\n2020-21\n68.0\n32.0\n28.7\n4.9\n11.1\n0.443\n2.0\n5.6\n0.361\n...\n0.691\n1.6\n4.5\n6.1\n1.9\n0.5\n0.6\n1.7\n1.8\n12.9\n\n\n4\n2021-22\n66.0\n66.0\n33.4\n6.4\n14.2\n0.452\n1.9\n5.7\n0.341\n...\n0.712\n1.1\n7.4\n8.5\n3.5\n0.6\n0.9\n2.6\n1.9\n17.1\n\n\n5\n2022-23\n64.0\n64.0\n35.0\n8.0\n17.8\n0.448\n2.5\n7.5\n0.333\n...\n0.730\n0.9\n6.4\n7.2\n3.7\n0.6\n0.5\n3.0\n2.3\n21.2\n\n\n6\n2023-24\n70.0\n70.0\n32.6\n8.7\n18.8\n0.463\n2.2\n6.4\n0.336\n...\n0.775\n0.9\n5.7\n6.6\n4.2\n0.5\n0.7\n2.7\n2.2\n22.2\n\n\n\n\n7 rows × 26 columns\n\n\n\n\n\nCode\nnumerical_columnsk = KK.select_dtypes(include=['float64', 'int64']).columns\navailable_stats = numerical_columnsk.tolist()  # Assuming numerical_columns is a pandas Index or Series\n\n# Create dropdown menu\ndropdown = go.layout.Updatemenu(\n    buttons=list([\n        dict(label=stat, method='update', args=[{'visible': [stat == col for col in numerical_columnsk]}])\n        for stat in available_stats\n    ]),\n    direction='down', showactive=True\n)\n\n# Create traces for each stat\ntraces = [\n    go.Scatter(x=KK.index, y=KK[stat], mode='lines', name=stat) for stat in available_stats\n]\n\n# Create layout with dropdown menu and initial trace visibility\nlayout = go.Layout(\n    title='Kyle Kuzma Stats Over Seasons',\n    xaxis=dict(title='Season'),\n    yaxis=dict(title='Stats Value'),\n    updatemenus=[dropdown],  # Wrap the dropdown in a list\n)\n\n# Create figure\nfig = go.Figure(data=traces, layout=layout)\n\n# Show the figure\nfig.show()"
  },
  {
    "objectID": "Radar.html",
    "href": "Radar.html",
    "title": "Comparison Analysis on Jordan Poole and Kyle Kuzma with their peers",
    "section": "",
    "text": "In this section, we plan to utilize a Radar Chart for a comparative analysis of Jordan Poole and Kyle Kuzma alongside other NBA players in their respective positions. We have restricted our comparison to players who have participated in at least 60 games and averaged a minimum of 30 minutes on the court per game. We have selected eight key metrics for this comparison: PTS (Points Per Game), AST (Assists Per Game), TRB (Rebounds Per Game), 3P% (Three-Point Percentage), USG% (Usage Percentage), TS% (True Shooting Percentage), DWS (Defensive Win Shares), and PER (Player Efficiency Rating). These metrics will help highlight the strengths and weaknesses of Jordan Poole and Kyle Kuzma relative to their peers.\n\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\n\nadv_data = pd.read_excel('Data23-24/allplayeradv_23-24.xlsx')\nreg_data = pd.read_excel('Data23-24/allplayer_23-24.xlsx')\n\n# we choose SG and PF have more than 60 games and more than 30 minutes per game\nSG_names = ['Jordan Poole','Jalen Green','Derrick White','Dejounte Murray','Cam Thomas','Anthony Edwards','Grayson Allen','Scottie Barnes','Bogdan Bogdanović','Kentavious Caldwell-Pope','Austin Reaves','Terry Rozier','Devin Vassell']\n\nPF_names = ['Giannis Antetokounmpo','Paolo Banchero','Jimmy Butler','Kevin Durant','Paul George','Aaron Gordon','Tobias Harris','LeBron James','Kyle Kuzma','Pascal Siakam','Jabari Smith Jr.','Jayson Tatum','Karl-Anthony Towns','P.J. Washington','Jalen Williams','Zion Williamson']\n\nSG_df_reg = reg_data[reg_data['Player'].isin(SG_names)]\nSG_df_reg.drop_duplicates(subset=['Player'], inplace=True)\nSG_df_adv = adv_data[adv_data['Player'].isin(SG_names)]\nSG_df_adv.drop_duplicates(subset=['Player'], inplace=True)\n\nPF_df_reg = reg_data[reg_data['Player'].isin(PF_names)]\nPF_df_reg.drop_duplicates(subset=['Player'], inplace=True)\nPF_df_adv = adv_data[adv_data['Player'].isin(PF_names)]\nPF_df_adv.drop_duplicates(subset=['Player'], inplace=True)\n\n#columns_to_include = ['Player','OWS','DWS','VORP','TS%','PTS','AST','TRB','3P%']\nSG_total = pd.merge(SG_df_adv, SG_df_reg, on='Player', how='inner')\nSG_final = SG_total.loc[:, ['Player','USG%','DWS','PER','TS%','PTS','AST','TRB','3P%']]\n\nPF_total = pd.merge(PF_df_adv, PF_df_reg, on='Player', how='inner')\nPF_final = PF_total.loc[:, ['Player','USG%','DWS','PER','TS%','PTS','AST','TRB','3P%']]\n\nPF_final = PF_final.transpose()\nSG_final = SG_final.transpose()\n\nPF_final = PF_final.reset_index()\nPF_final.columns = PF_final.iloc[0]\nPF_plot= PF_final[1:].reset_index(drop=True)\nPF_plot.rename(columns={'Player': 'Splits'}, inplace=True)\n\nSG_final = SG_final.reset_index()\nSG_final.columns = SG_final.iloc[0]\nSG_plot= SG_final[1:].reset_index(drop=True)\nSG_plot.rename(columns={'Player': 'Splits'}, inplace=True)\n\nSG_plot.iloc[0,1:] = SG_plot.iloc[0,1:] * 3\nSG_plot.iloc[1,1:] = SG_plot.iloc[1,1:] * 20\nSG_plot.iloc[2,1:] = SG_plot.iloc[2,1:] * 5\nSG_plot.iloc[3,1:] = SG_plot.iloc[3,1:] * 100\nSG_plot.iloc[4,1:] = SG_plot.iloc[4,1:] * 3\nSG_plot.iloc[5,1:] = SG_plot.iloc[5,1:] * 15\nSG_plot.iloc[6,1:] = SG_plot.iloc[6,1:] * 12\nSG_plot.iloc[7,1:] = SG_plot.iloc[7,1:] * 100\nSG_plot.set_index('Splits', inplace=True)\n\nPF_plot.iloc[0,1:] = PF_plot.iloc[0,1:] * 3\nPF_plot.iloc[1,1:] = PF_plot.iloc[1,1:] * 20\nPF_plot.iloc[2,1:] = PF_plot.iloc[2,1:] * 3\nPF_plot.iloc[3,1:] = PF_plot.iloc[3,1:] * 100\nPF_plot.iloc[4,1:] = PF_plot.iloc[4,1:] * 3\nPF_plot.iloc[5,1:] = PF_plot.iloc[5,1:] * 12\nPF_plot.iloc[6,1:] = PF_plot.iloc[6,1:] * 8\nPF_plot.iloc[7,1:] = PF_plot.iloc[7,1:] * 100\nPF_plot.set_index('Splits', inplace=True)\n\nC:\\Users\\zhuti\\AppData\\Local\\Temp\\ipykernel_8084\\1169799151.py:14: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\zhuti\\AppData\\Local\\Temp\\ipykernel_8084\\1169799151.py:16: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\zhuti\\AppData\\Local\\Temp\\ipykernel_8084\\1169799151.py:19: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\nC:\\Users\\zhuti\\AppData\\Local\\Temp\\ipykernel_8084\\1169799151.py:21: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\nFrom the plot above, we could clearly see the difference between Jordan Poole and other shooting guards with more than 60 games played and 30 minutes averaged per game. Jordan Poole has the highest usage among these players, but does not show a significant lead on other metrics like PER, DWS. This means Jordan Poole is not a highly efficient player, and he is not likely to bring wins for Washington Wizards in this season.\n\n# Create a radar chart\nfig = go.Figure()\n\ncolors = [\"Red\", \"Green\",\"Blue\",\"Orange\",\"Yellow\",\"Purple\",\"Cyan\",\"Magenta\",\"Lime\",\"Pink\",\"Teal\",\"Olive\",\"Brown\"]\n\n\nfor i, column in enumerate(SG_plot.columns):\n    fig.add_trace(go.Scatterpolar(\n        r=SG_plot[column].values,  # Access the column values for each car\n        theta=SG_plot.index,       # Use the DataFrame index as categories\n        fill='toself',\n        name=column,\n        line=dict(color=colors[i]),\n        visible=True\n    ))\n\n\n# Update the layout\nfig.update_layout(\n    title=\"Comparison of Jordan Poole with selected Shooting Guards\",\n    polar=dict(\n        radialaxis=dict(\n            visible=True,\n            range=[0, 100]  # Set range according to your data\n        )\n    ),\nupdatemenus=[{\n        \"type\": \"dropdown\",\n        \"buttons\": [\n            {\n                \"label\": \"All players\",\n                \"method\": \"update\",\n                \"args\": [{\"visible\": [True, True, True,True,True,True,True,True,True,True,True,True,True]}]\n            },\n            {\n                \"label\": \"Grayson Allen vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [True, False, False, False,False,False,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Scottie Barnes vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, True, False,False,False,False,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Bogdan Bogdanović vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, True,False,False,False,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Kentavious Caldwell-Pope vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, True,False,False,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Anthony Edwards vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False, True, False,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Jalen Green vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False,False,False,True,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Dejounte Murray vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False,False, False,False,False,True,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Jordan Poole\",\n                \"method\": \"update\",\n                \"args\": [{\"visible\": [False, False,False,False,False,False,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Austin Reaves vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False,False,False,False,False,False,True,True,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Terry Rozier vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False,False,False,False,False,False,True,False,True,False,False,False]}]\n            },\n            {\n                \"label\": \"Cam Thomas vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False,False,False,False,False,False,True,False,False,True,False,False]}]\n            },\n            {\n                \"label\": \"Devin Vassell vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False,False,False,False,False,False,True,False,False,False,True,False]}]\n            },\n            {\n                \"label\": \"Derrick White vs. Jordan Poole\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False,False,False,False,False,False,True,False,False,False,False,True]}]\n            }\n        ],\n        \"direction\": \"down\",\n        \"showactive\": True,\n    }]\n)\n# Show the plot\nfig.show()\n\n                                                \n\n\n\n# Create a radar chart\nfig = go.Figure()\n\ncolors_PF = [\"Red\", \"Green\",\"Blue\",\"Orange\",\"Yellow\",\"Purple\",\"Cyan\",\"Magenta\",\"Lime\",\"Pink\",\"Teal\",\"Olive\",\"Brown\",\"Navy\",\"Maroon\",\"Coral\"]\n\n\nfor i, column in enumerate(PF_plot.columns):\n    fig.add_trace(go.Scatterpolar(\n        r=PF_plot[column].values,  # Access the column values for each car\n        theta=PF_plot.index,       # Use the DataFrame index as categories\n        fill='toself',\n        name=column,\n        line=dict(color=colors_PF[i]),\n        visible=True\n    ))\n\n\n# Update the layout\nfig.update_layout(\n    title=\"Comparison of Kyle Kuzma and selected Power Forwards\",\n    polar=dict(\n        radialaxis=dict(\n            visible=True,\n            range=[0, 100]  # Set range according to your data\n        )\n    ),\nupdatemenus=[{\n        \"type\": \"dropdown\",\n        \"buttons\": [\n            {\n                \"label\": \"All players\",\n                \"method\": \"update\",\n                \"args\": [{\"visible\": [True, True, True,True,True,True,True,True,True,True,True,True,True,True,True,True]}]\n            },\n            {\n                \"label\": \"Giannis Antetokounmpo vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [True, False, False, False,False,False,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Paolo Banchero vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, True, False, False,False,False,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Jimmy Butler vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, True, False,False,False,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Kevin Durant vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, True,False,False,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Paul George vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,True,False,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Aaron Gordon vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,True,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Tobias Harris vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,True,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Lebron James vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,True,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Kyle Kuzma\",\n                \"method\": \"update\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Pascal Siakam vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,True,False,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Jabari Smith Jr. vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,True,False,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Jayson Tatum vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,False,True,False,False,False,False]}]\n            },\n            {\n                \"label\": \"Karl-Anthony Towns vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,False,False,True,False,False,False]}]\n            },\n            {\n                \"label\": \"P.J. Washington Towns vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,False,False,False,True,False,False]}]\n            },\n            {\n                \"label\": \"Jalen Williams vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,False,False,False,False,True,False]}]\n            },\n            {\n                \"label\": \"Zion Williamson vs. Kyle Kuzma\",\n                \"method\": \"restyle\",\n                \"args\": [{\"visible\": [False, False, False, False,False,False,False,False,True,False,False,False,False,False,False,True]}]\n            }\n        ],\n        \"direction\": \"down\",\n        \"showactive\": True,\n    }]\n)\n# Show the plot\nfig.show()\n\n                                                \n\n\nThe same situation happens to Kyle Kuzma. The selected comparison players all have pretty close usage %, but they could all show better advanced splits. Advanced splits are often used to check the efficiency of a player. Under this situation, Kyle Kuzma, as the starting Power Forward of Wshington Wizards, is also a low efficient player."
  }
]