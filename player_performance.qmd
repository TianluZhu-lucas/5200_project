---
title: Washington Wizard player performances
---
# Wizard Player Performance
Following a general assessment on the team performance for Washington Wizard, we wish to evaluate the team's individual player contribution and find out the factor for causing the team's poor performance. 

```{python}
#| code-fold: true
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

player = pd.read_excel("Data23-24/allplayeradv_23-24.xlsx")
player.dropna(axis = 1, inplace = True)

player = player[['Player', 'Tm','OBPM','DBPM']]
player.drop_duplicates(subset=['Player'], inplace=True)
player.head()

WAS_players = player.loc[player['Tm'] == 'WAS']

all_players_trace = go.Scatter(
    x=player['OBPM'],
    y=player['DBPM'],
    mode='markers',
    marker=dict(color='black'),  # All players are blue initially
    text=player['Player'],
    name='All Players'
)

selected_traces = []

for index, row in WAS_players.iterrows():
    trace = go.Scatter(
        x=[row['OBPM']],
        y=[row['DBPM']],
        mode='markers',
        marker=dict(color='red'),  # All initially blue
        text=row['Player'],
        name=row['Player'],
        visible=False  # Initially invisible
    )
    selected_traces.append(trace)

# Add the traces for selected WAS players to the data list
data = [all_players_trace] + selected_traces

# Create dropdown menu options
dropdown_options = [{'label': player_name, 
                     'method': 'update', 
                     'args': [{'visible': [True] + [False] * len(WAS_players)}]} for player_name in WAS_players['Player']]

# Update the color of selected player to red
for i in range(len(WAS_players)):
    dropdown_options[i]['args'][0]['visible'][i + 1] = True
    dropdown_options[i]['args'][0]['marker'] = dict(color=['red'] + ['black'] * len(WAS_players))

# Create dropdown menu
updatemenus = [{'buttons': dropdown_options, 'direction': 'down', 'showactive': True}]

# Layout
layout = go.Layout(
    title='Player BPM',
    xaxis=dict(title='OBPM'),
    yaxis=dict(title='DBPM'),
    hovermode='closest',
    updatemenus=updatemenus
)

fig = go.Figure(data=data, layout=layout)

fig.show()
```

The scatterplot presented above features an x-axis representing Offensive Box Plus/Minus and a y-axis representing Defensive Box Plus/Minus. These two factors evaluate a player's contribution to both offense and defense. A high score in each factor indicates the player's irreplaceability for the team's offense or defense.


# Wizard Star Performance

To further evaluate and improve the performance of the whole team, we need to examine how the star players perform. The star players of the Washington Wizards are Jordan Poole and Kyle Kuzma, and we will take a look at their performance throughout their career.

## Jordan Poole

```{python}
#| code-fold: true
import pandas as pd
import numpy as np
import plotly as ply
```

```{python}
#| code-fold: true

JP = pd.read_excel('Data23-24/JP_career.xlsx')
KK = pd.read_excel('Data23-24/KK_career.xlsx')
JP


```

```{python}
#| code-fold: true
from plotly.subplots import make_subplots
import plotly.graph_objects as go
# Define available stats for dropdown
import plotly.express as px
col_d = ['Age','Lg','Pos', 'Awards','Tm']
JP = JP.drop(columns=col_d)
JP = JP.drop(JP.tail(4).index)
numerical_columns = JP.select_dtypes(include=['float64', 'int64']).columns
available_stats = numerical_columns.tolist()  # Assuming numerical_columns is a pandas Index or Series

# Create dropdown menu
dropdown = go.layout.Updatemenu(
    buttons=list([
        dict(label=stat, method='update', args=[{'visible': [stat == col for col in numerical_columns]}])
        for stat in available_stats
    ]),
    direction='down', showactive=True
)

# Create traces for each stat
traces = [
    go.Scatter(x=JP.index, y=JP[stat], mode='lines', name=stat) for stat in available_stats
]

# Create layout with dropdown menu and initial trace visibility
layout = go.Layout(
    title='Jordan Poole Stats Over Seasons',
    xaxis=dict(title='Season'),
    yaxis=dict(title='Stats Value'),
    updatemenus=[dropdown],  # Wrap the dropdown in a list
)

# Create figure
fig = go.Figure(data=traces, layout=layout)

# Show the figure
fig.show()
```

Jordan Poole is a shooting guard, and the main job for shooting guard is to make shots and score. Thus the best way to evaluate Jordan Poole's performance is to see how efficient he is offensively. First we look at his average point for each season. It seems like he got his career high of point per game last season when he was in the Golden states warriors, and now his average point per game is lower than his second best season. Furthermore his field goal percentage is at his lowest since his second season. As basketball fans we know that this is probabily because now he is dealing with bigger denfensive attention, which means that their opponents are sending better defensive player to guard him whereas for the past few seasons when he was in the Golden States Warrior, the best defensive player of their opponents were guarding Stephen Curry or Klay Thompson. From this line plot, we know that Jordan Poole is not a stable scorer, and he is probabily overated as a star. However, this is only his 5th season in the league and his first season at the Washington Wizards, we should give him more time to adjust the situation. 


## Kyle Kuzma
 
```{python}
#| code-fold: true
KK 

```
```{python}
#| code-fold: true
KK = KK.drop(columns=col_d)
KK = KK.drop(KK.tail(4).index)
numerical_columnsk = KK.select_dtypes(include=['float64', 'int64']).columns
available_stats = numerical_columnsk.tolist()  # Assuming numerical_columns is a pandas Index or Series

# Create dropdown menu
dropdown = go.layout.Updatemenu(
    buttons=list([
        dict(label=stat, method='update', args=[{'visible': [stat == col for col in numerical_columnsk]}])
        for stat in available_stats
    ]),
    direction='down', showactive=True
)

# Create traces for each stat
traces = [
    go.Scatter(x=KK.index, y=KK[stat], mode='lines', name=stat) for stat in available_stats
]

# Create layout with dropdown menu and initial trace visibility
layout = go.Layout(
    title='Kyle Kuzma Stats Over Seasons',
    xaxis=dict(title='Season'),
    yaxis=dict(title='Stats Value'),
    updatemenus=[dropdown],  # Wrap the dropdown in a list
)

# Create figure
fig = go.Figure(data=traces, layout=layout)

# Show the figure
fig.show()
```

Now we will be looking at the career path of Kyle Kuzma, another star of Washington Wizards. As a power forward/small forward, Kyle Kuzma should have the ability to play defense, get rebounds and score. 

First we will evaluate his defense by examing his ability to steal and block. We can see from the line plot that through out his whole career(7 seasons), his steal is in the range of 0.5 to 0.6 per game, and his block ability is incosistent comparing to his steal ability with a range of 0.4 to 0.9 per game. With these informations, we understand that he is not a very good defender. 

In terms of rebounding, Kyle Kuzma did a decent job on his first year as a Washington Wizard, he ended up with an average 8.5 total rebound that season. However, his total rebound has droped since then, and he only average 6.6 rebound this season. The number isn't that bad but the fact that his rebounding performance has constantly droping for two season is concerning. 

Lastly we will evaluate his scoring performance. His average points has been skyrocketing since he was traded to the Washington Wizards. But when we look at his field goal attempt we can also see that the number is skyrocketing. This is because the Washington Wizzards use him as the number star in the team and allows him to shoot more. To further evaluate his scoring performance, we found out that his fiedl goal percentage is at his career best this season with a decent 46%. This shows that he is a decent scorer this season. 

# Wizzard star performances vs other players' performances

In this section, we plan to utilize a Radar Chart for a comparative analysis of Jordan Poole and Kyle Kuzma alongside other NBA players in their respective positions. We have restricted our comparison to players who have participated in at least 60 games and averaged a minimum of 30 minutes on the court per game. We have selected eight key metrics for this comparison: PTS (Points Per Game), AST (Assists Per Game), TRB (Rebounds Per Game), 3P% (Three-Point Percentage), USG% (Usage Percentage), TS% (True Shooting Percentage), DWS (Defensive Win Shares), and PER (Player Efficiency Rating). These metrics will help highlight the strengths and weaknesses of Jordan Poole and Kyle Kuzma relative to their peers.

```{python echo=False}
#| code-fold: true
import plotly.graph_objects as go
import pandas as pd
import numpy as np

adv_data = pd.read_excel('Data23-24/allplayeradv_23-24.xlsx')
reg_data = pd.read_excel('Data23-24/allplayer_23-24.xlsx')

# we choose SG and PF have more than 60 games and more than 30 minutes per game
SG_names = ['Jordan Poole','Jalen Green','Derrick White','Dejounte Murray','Cam Thomas','Anthony Edwards','Grayson Allen','Scottie Barnes','Bogdan BogdanoviÄ‡','Kentavious Caldwell-Pope','Austin Reaves','Terry Rozier','Devin Vassell']

PF_names = ['Giannis Antetokounmpo','Paolo Banchero','Jimmy Butler','Kevin Durant','Paul George','Aaron Gordon','Tobias Harris','LeBron James','Kyle Kuzma','Pascal Siakam','Jabari Smith Jr.','Jayson Tatum','Karl-Anthony Towns','P.J. Washington','Jalen Williams','Zion Williamson']

SG_df_reg = reg_data[reg_data['Player'].isin(SG_names)]
SG_df_reg.drop_duplicates(subset=['Player'], inplace=True)
SG_df_adv = adv_data[adv_data['Player'].isin(SG_names)]
SG_df_adv.drop_duplicates(subset=['Player'], inplace=True)

PF_df_reg = reg_data[reg_data['Player'].isin(PF_names)]
PF_df_reg.drop_duplicates(subset=['Player'], inplace=True)
PF_df_adv = adv_data[adv_data['Player'].isin(PF_names)]
PF_df_adv.drop_duplicates(subset=['Player'], inplace=True)

#columns_to_include = ['Player','OWS','DWS','VORP','TS%','PTS','AST','TRB','3P%']
SG_total = pd.merge(SG_df_adv, SG_df_reg, on='Player', how='inner')
SG_final = SG_total.loc[:, ['Player','USG%','DWS','PER','TS%','PTS','AST','TRB','3P%']]

PF_total = pd.merge(PF_df_adv, PF_df_reg, on='Player', how='inner')
PF_final = PF_total.loc[:, ['Player','USG%','DWS','PER','TS%','PTS','AST','TRB','3P%']]

PF_final = PF_final.transpose()
SG_final = SG_final.transpose()

PF_final = PF_final.reset_index()
PF_final.columns = PF_final.iloc[0]
PF_plot= PF_final[1:].reset_index(drop=True)
PF_plot.rename(columns={'Player': 'Splits'}, inplace=True)

SG_final = SG_final.reset_index()
SG_final.columns = SG_final.iloc[0]
SG_plot= SG_final[1:].reset_index(drop=True)
SG_plot.rename(columns={'Player': 'Splits'}, inplace=True)

SG_plot.iloc[0,1:] = SG_plot.iloc[0,1:] * 3
SG_plot.iloc[1,1:] = SG_plot.iloc[1,1:] * 20
SG_plot.iloc[2,1:] = SG_plot.iloc[2,1:] * 5
SG_plot.iloc[3,1:] = SG_plot.iloc[3,1:] * 100
SG_plot.iloc[4,1:] = SG_plot.iloc[4,1:] * 3
SG_plot.iloc[5,1:] = SG_plot.iloc[5,1:] * 15
SG_plot.iloc[6,1:] = SG_plot.iloc[6,1:] * 12
SG_plot.iloc[7,1:] = SG_plot.iloc[7,1:] * 100
SG_plot.set_index('Splits', inplace=True)

PF_plot.iloc[0,1:] = PF_plot.iloc[0,1:] * 3
PF_plot.iloc[1,1:] = PF_plot.iloc[1,1:] * 20
PF_plot.iloc[2,1:] = PF_plot.iloc[2,1:] * 3
PF_plot.iloc[3,1:] = PF_plot.iloc[3,1:] * 100
PF_plot.iloc[4,1:] = PF_plot.iloc[4,1:] * 3
PF_plot.iloc[5,1:] = PF_plot.iloc[5,1:] * 12
PF_plot.iloc[6,1:] = PF_plot.iloc[6,1:] * 8
PF_plot.iloc[7,1:] = PF_plot.iloc[7,1:] * 100
PF_plot.set_index('Splits', inplace=True)
```


From the plot above, we could clearly see the difference between Jordan Poole and other shooting guards with more than 60 games played and 30 minutes averaged per game. Jordan Poole has the highest usage among these players, but does not show a significant lead on other metrics like PER, DWS. This means Jordan Poole is not a highly efficient player, and he is not likely to bring wins for Washington Wizards in this season.

```{python}
#| code-fold: true
# Create a radar chart
fig = go.Figure()

colors = ["Red", "Green","Blue","Orange","Yellow","Purple","Cyan","Magenta","Lime","Pink","Teal","Olive","Brown"]


for i, column in enumerate(SG_plot.columns):
    fig.add_trace(go.Scatterpolar(
        r=SG_plot[column].values,  # Access the column values for each car
        theta=SG_plot.index,       # Use the DataFrame index as categories
        fill='toself',
        name=column,
        line=dict(color=colors[i]),
        visible=True
    ))


# Update the layout
fig.update_layout(
    title="Comparison of Jordan Poole with selected Shooting Guards",
    polar=dict(
        radialaxis=dict(
            visible=True,
            range=[0, 100]  # Set range according to your data
        )
    ),
updatemenus=[{
        "type": "dropdown",
        "buttons": [
            {
                "label": "All players",
                "method": "update",
                "args": [{"visible": [True, True, True,True,True,True,True,True,True,True,True,True,True]}]
            },
            {
                "label": "Grayson Allen vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [True, False, False, False,False,False,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Scottie Barnes vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, True, False,False,False,False,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Bogdan BogdanoviÄ‡ vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False, True,False,False,False,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Kentavious Caldwell-Pope vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False, False, True,False,False,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Anthony Edwards vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False, True, False,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Jalen Green vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False, False,False,False,True,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Dejounte Murray vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False,False, False,False,False,True,True,False,False,False,False,False]}]
            },
            {
                "label": "Jordan Poole",
                "method": "update",
                "args": [{"visible": [False, False,False,False,False,False,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Austin Reaves vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False,False,False,False,False,False,True,True,False,False,False,False]}]
            },
            {
                "label": "Terry Rozier vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False,False,False,False,False,False,True,False,True,False,False,False]}]
            },
            {
                "label": "Cam Thomas vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False,False,False,False,False,False,True,False,False,True,False,False]}]
            },
            {
                "label": "Devin Vassell vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False,False,False,False,False,False,True,False,False,False,True,False]}]
            },
            {
                "label": "Derrick White vs. Jordan Poole",
                "method": "restyle",
                "args": [{"visible": [False, False,False,False,False,False,False,True,False,False,False,False,True]}]
            }
        ],
        "direction": "down",
        "showactive": True,
    }]
)
# Show the plot
fig.show()
```

```{python}
#| code-fold: true
# Create a radar chart
fig = go.Figure()

colors_PF = ["Red", "Green","Blue","Orange","Yellow","Purple","Cyan","Magenta","Lime","Pink","Teal","Olive","Brown","Navy","Maroon","Coral"]


for i, column in enumerate(PF_plot.columns):
    fig.add_trace(go.Scatterpolar(
        r=PF_plot[column].values,  # Access the column values for each car
        theta=PF_plot.index,       # Use the DataFrame index as categories
        fill='toself',
        name=column,
        line=dict(color=colors_PF[i]),
        visible=True
    ))


# Update the layout
fig.update_layout(
    title="Comparison of Kyle Kuzma and selected Power Forwards",
    polar=dict(
        radialaxis=dict(
            visible=True,
            range=[0, 100]  # Set range according to your data
        )
    ),
updatemenus=[{
        "type": "dropdown",
        "buttons": [
            {
                "label": "All players",
                "method": "update",
                "args": [{"visible": [True, True, True,True,True,True,True,True,True,True,True,True,True,True,True,True]}]
            },
            {
                "label": "Giannis Antetokounmpo	vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [True, False, False, False,False,False,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Paolo Banchero vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, True, False, False,False,False,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Jimmy Butler vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, True, False,False,False,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Kevin Durant vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, True,False,False,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Paul George vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,True,False,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Aaron Gordon vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,True,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Tobias Harris vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,True,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Lebron James vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,True,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Kyle Kuzma",
                "method": "update",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,False,False,False,False,False,False]}]
            },
            {
                "label": "Pascal Siakam vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,True,False,False,False,False,False,False]}]
            },
            {
                "label": "Jabari Smith Jr. vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,True,False,False,False,False,False]}]
            },
            {
                "label": "Jayson Tatum vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,False,True,False,False,False,False]}]
            },
            {
                "label": "Karl-Anthony Towns vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,False,False,True,False,False,False]}]
            },
            {
                "label": "P.J. Washington Towns vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,False,False,False,True,False,False]}]
            },
            {
                "label": "Jalen Williams vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,False,False,False,False,True,False]}]
            },
            {
                "label": "Zion Williamson vs. Kyle Kuzma",
                "method": "restyle",
                "args": [{"visible": [False, False, False, False,False,False,False,False,True,False,False,False,False,False,False,True]}]
            }
        ],
        "direction": "down",
        "showactive": True,
    }]
)
# Show the plot
fig.show()
```

The same situation happens to Kyle Kuzma. The selected comparison players all have pretty close usage %, but they could all show better advanced splits. Advanced splits are often used to check the efficiency of a player. Under this situation, Kyle Kuzma, as the starting Power Forward of Wshington Wizards, is also a low efficient player.
